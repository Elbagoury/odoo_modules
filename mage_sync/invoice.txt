@api.multi
	def action_invoice_create(self, grouped=False, final=False):
		_logger = logging.getLogger(_name_)
		inv_obj = self.env['account.invoice']
		precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
		invoices = {}

		for order in self:
			magento_order_id = order.magento_id
			group_key = order.id if grouped else (order.partner_id.id, order.currency_id.id)
			for line in order.order_line.sorted(key=lambda l: l.qty_to_invoice < 0):
				if float_is_zero(line.qty_to_invoice, precision_digits=precision):
					continue
				if group_key not in invoices:
					inv_data = order._prepare_invoice()
					invoice = inv_obj.create(inv_data)
					invoices[group_key] = invoice
				elif group_key in invoices and order.name not in invoices[group_key].origin.split(', '):
					invoices[group_key].write({'origin': invoices[group_key].origin + ', ' + order.name})
				if line.qty_to_invoice > 0:
					line.invoice_line_create(invoices[group_key].id, line.qty_to_invoice)
				elif line.qty_to_invoice < 0 and final:
					line.invoice_line_create(invoices[group_key].id, line.qty_to_invoice)

		for invoice in invoices.values():
			# If invoice is negative, do a refund invoice instead
			if invoice.amount_untaxed < 0:
				invoice.type = 'out_refund'
				for line in invoice.invoice_line_ids:
					line.quantity = -line.quantity
			# Necessary to force computation of taxes. In account_invoice, they are triggered
            # by onchanges, which are not triggered when doing a create.
			invoice.compute_taxes()
			_logger(" WORKING********************** %s " % magento_order_id)
			print " WORKING********************** %s " % magento_order_id
			#if magento_order_id:
	            #if not self.pool.get('magento.sync')._export_invoice(cr, uid, magento_order_id, )
		return [inv.id for inv in invoices.values()]